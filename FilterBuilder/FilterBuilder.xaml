<Window x:Class="CmcScriptNet.FilterBuilder.FilterBuilderWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CmcScriptNet.FilterBuilder"
        xmlns:my="clr-namespace:CmcScriptNet.FilterBuilder.UserControls"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:models="clr-namespace:CmcScriptNet.FilterBuilder.Models"
        mc:Ignorable="d"
        Title="{Binding CategoryName, Mode=OneTime, StringFormat='Filter for Category: {0}'}" MaxHeight="640" MaxWidth="800">
    <Window.DataContext>
        <models:FilterBuilderModel x:Name="filterBuilderModel"/>
    </Window.DataContext>
    <Window.Resources>
        <Style x:Key="filterToVisibility" TargetType="StackPanel">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=filterList, Path=SelectedValue.Tag}" Value="filter">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="summaryToVisibility" TargetType="StackPanel">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=filterList, Path=SelectedValue.Tag}" Value="summary">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid ShowGridLines="False">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="20"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="20"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="20"/>
        </Grid.RowDefinitions>
        <!-- list of filters-->
        <!-- We are not going to bother with this,
        because there is no proper way to set the filter relations
        without returning actual code.
        That could clash with existing code.
        Another complex matter is the retaining of the set values
        on the viewmodel when switching models.
        I cannot seem to get that working properly.
        I will leave this code in, in case we ever change our mind in the future.
        For now it will just show 1 filter
        -->
        <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="1">
            <ListView x:Name="filterList"
                ItemsSource="{Binding FilterList}"
                      DisplayMemberPath="DisplayName"
                      SelectedIndex="1"
                      Margin="5"
                      SelectionChanged="ListView_SelectionChanged"/>
        </StackPanel>
     
        <!-- the filter conjunction control -->
        <StackPanel Orientation="Vertical" Grid.Column="2" Grid.Row="1"
                    Style="{StaticResource summaryToVisibility}">
            <my:FilterConjunctionControl/>
            <TextBox x:Name="tbConjunction"
                     IsReadOnly="True"
                     IsReadOnlyCaretVisible="True"
                     Text="{Binding Path=ViewConjunction}"
                     HorizontalAlignment="Center"/>
        </StackPanel>
                
        <!-- the filter control -->
        <StackPanel Orientation="Vertical" Grid.Column="2" Grid.Row="1"
                    Style="{StaticResource filterToVisibility}">
            <!-- This should be implemented differently I think.
            The cleanest way might be to define the datacontext of the filtercontrol,
            which is a separate object in it's own right, in it's own xaml.
            It needs two things: the clause number and the categoryname, 
            so we need to figure out the best way to pass those one.
            One way would be to use dependency objects.
            Another could be to use the Loaded event.
            I am no expert in WPF so I am thinking out loud here-->
            <my:FilterControl DataContext="{Binding CurrentFilterControlModel}"/>

        </StackPanel>

        <!-- buttons -->
        <StackPanel Orientation="Horizontal" Grid.Column="2" Grid.Row="2" HorizontalAlignment="Right">
            <Button Content="Insert" IsDefault="True" Click="Ok_Click" MinWidth="80" Margin="5"
                    IsEnabled="{Binding Path=CurrentFilterControlModel.IsValid}"/>
            <Button Content="Cancel" IsCancel="True" MinWidth="80" Margin="5"/>
        </StackPanel>
    </Grid>
</Window>
